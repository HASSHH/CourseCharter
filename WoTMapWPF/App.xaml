<Application x:Class="WoTMapWPF.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:WoTMapWPF"
             xmlns:custom="clr-namespace:WoTMapWPF.CustomControls"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             StartupUri="MainWindow.xaml"
             Startup="Application_Startup"
             Exit="Application_Exit">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary x:Name="ThemeDictionary">
                    <ResourceDictionary.MergedDictionaries>
                        <ResourceDictionary Source="/Themes/Default.xaml"/>
                    </ResourceDictionary.MergedDictionaries>
                </ResourceDictionary>
                <ResourceDictionary x:Name="SettingsDictionary">
                    <ResourceDictionary.MergedDictionaries>
                        <ResourceDictionary Source="DefaultSettings.xaml"/>
                    </ResourceDictionary.MergedDictionaries>
                </ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>

            <BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>
            <local:PixelsToUnitsConverter x:Key="PixelsToUnitsConverter"/>
            <System:Double x:Key="FontSizeMain">18</System:Double>
            <System:Double x:Key="FontSizeSmall">14</System:Double>
            <System:Double x:Key="FontSizeLarge">24</System:Double>

            <Style TargetType="StackPanel" x:Key="MainMenuPanel">
                <Setter Property="Orientation" Value="Vertical"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
            </Style>

            <Style TargetType="Button" x:Key="CloseButtonStyle">
                <Setter Property="Background" Value="Red"/>
                <Setter Property="Width" Value="20"/>
                <Setter Property="Height" Value="20"/>
            </Style>

            <Style TargetType="Button" x:Key="SubmitButton">
                <Setter Property="FontSize" Value="{DynamicResource FontSizeLarge}"/>
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="Margin" Value="10"/>
                <Setter Property="Width" Value="100"/>
            </Style>

            <Style TargetType="Border" x:Key="PanelContainerStyle">
                <Setter Property="Background" Value="{DynamicResource ThemeColorVibrant}"/>
                <Setter Property="Padding" Value="10"/>
            </Style>

            <Style TargetType="Grid" x:Key="ConfirmActionStyle">
                <Setter Property="Margin" Value="20"/>
                <Setter Property="TextBlock.FontSize" Value="{DynamicResource FontSizeMain}"/>
                <Style.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="Margin" Value="30"/>
                    </Style>
                </Style.Resources>
            </Style>

            <Style TargetType="UserControl" x:Key="FormPanel">
                <Setter Property="Grid.MaxWidth" Value="500"/>
                <Setter Property="Grid.Margin" Value="10"/>
                <Setter Property="Foreground" Value="{DynamicResource ThemeColorText}"/>
                <Style.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="VerticalAlignment" Value="Center"/>
                    </Style>
                    <Style TargetType="ListViewItem">
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource ThemeColorInactive}"/>
                        <Setter Property="Background" Value="{DynamicResource ThemeColorMuted}"/>
                        <Setter Property="Foreground" Value="{DynamicResource ThemeColorText}"/>
                    </Style>
                    <Style TargetType="Border" x:Key="PanelBorderStyle">
                        <Setter Property="BorderBrush" Value="{DynamicResource ThemeColorInactive}"/>
                        <Setter Property="BorderThickness" Value="4"/>
                        <Setter Property="CornerRadius" Value="10"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                    </Style>
                </Style.Resources>
            </Style>

            <Style TargetType="Border" x:Key="PaddedBorder">
                <Setter Property="Padding" Value="2 2 2 2"/>
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeColorInactive}"/>
                <Setter Property="Background" Value="{DynamicResource ThemeColorMain}"/>
            </Style>
            <Style TargetType="Border" x:Key="PaddedLabelBorder" BasedOn="{StaticResource ResourceKey=PaddedBorder}">
                <Style.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="HorizontalAlignment" Value="Right"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                    </Style>
                </Style.Resources>
            </Style>

            <Style TargetType="ListViewItem" x:Key="PathNodeListViewItemStyle">
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="FontSize" Value="{DynamicResource FontSizeSmall}"/>
                <Setter Property="Padding" Value="5 2"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Background" Value="{DynamicResource ThemeColorMain}"/>
                <Setter Property="Foreground" Value="{DynamicResource ThemeColorText}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                <StackPanel>
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    <StackPanel Visibility="{Binding Path=HasDistance, Converter={StaticResource BoolToVisConverter}}">
                                        <StackPanel HorizontalAlignment="Center">
                                            <TextBlock Text="|"/>
                                        </StackPanel>
                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                            <TextBlock Name="DistanceTextBlock" 
                                                       Text="{local:DoubleBinding 
                                                {Binding Distance},
                                                {Binding Path=DataContext.DistanceUnitsPerPixel, RelativeSource={RelativeSource AncestorType={x:Type Window}}},
                                                Converter={StaticResource PixelsToUnitsConverter},
                                                StringFormat=N2}"/>
                                            <TextBlock Text=" "/>
                                            <TextBlock Text="{Binding Path=DataContext.DistanceUnit, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"/>
                                        </StackPanel>
                                        <StackPanel HorizontalAlignment="Center" >
                                            <TextBlock Text="|"/>
                                        </StackPanel>
                                    </StackPanel>
                                </StackPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType=ListView}}" Value="ShowNamedOnly"/>
                                        <Condition Binding="{Binding IsNamed}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType=ListView}}" Value="ShowNamedOnly"/>
                                        <Condition Binding="{Binding IsNamed}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter TargetName="DistanceTextBlock" Property="Text" Value="{local:DoubleBinding 
                                                {Binding CompoundDistance},
                                                {Binding Path=DataContext.DistanceUnitsPerPixel, RelativeSource={RelativeSource AncestorType={x:Type Window}}},
                                                Converter={StaticResource PixelsToUnitsConverter},
                                                StringFormat=N2}"/>
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource ThemeColorHighlight}"/>
                                </Trigger>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ThemeColorActive}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource ThemeColorTextInverted}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="Grid" x:Key="MapControlStyle">
                <Style.Resources>
                    <Style TargetType="GridSplitter" x:Key="VerticalGridSplitterStyle">
                        <Setter Property="VerticalAlignment" Value="Stretch"/>
                        <Setter Property="HorizontalAlignment" Value="Center"/>
                        <Setter Property="Background" Value="{DynamicResource ThemeColorVibrant}"/>
                        <Setter Property="ShowsPreview" Value="True"/>
                        <Setter Property="Width" Value="4"/>
                        <Setter Property="Visibility" Value="{Binding ElementName=PathNodesInfoListView, Path=Visibility}"/>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{DynamicResource ThemeColorHighlight}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                    <Style TargetType="ListView">
                        <Setter Property="SelectionMode" Value="Single"/>
                        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
                        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        <Setter Property="Background" Value="{DynamicResource ThemeColorMuted}"/>
                    </Style>
                    <Style TargetType="{x:Type local:CustomTextBox}">
                        <Setter Property="Background" Value="{DynamicResource ThemeColorMain}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource ThemeColorVibrant}"/>
                        <Setter Property="Foreground" Value="{DynamicResource ThemeColorText}"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
                        <Setter Property="HorizontalContentAlignment" Value="Left"/>
                        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                        <Setter Property="AllowDrop" Value="true"/>
                        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                        <Setter Property="FontSize" Value="{DynamicResource FontSizeMain}"/>
                        <Setter Property="FontStyle" Value="Italic"/>
                        <Setter Property="FontWeight" Value="Bold"/>
                        <Setter Property="IsReadOnly" Value="True"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type local:CustomTextBox}">
                                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                                        <Grid>
                                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                                            <TextBlock x:Name="Watermark" 
                                                   Visibility="Collapsed" 
                                                   TextTrimming="CharacterEllipsis" 
                                                   Text="{TemplateBinding Text}"
                                                   ToolTip="{TemplateBinding Text}"
                                                   Padding="2 0"/>
                                        </Grid>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsFocused" Value="False">
                                            <Setter TargetName="Watermark" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="PART_ContentHost" Property="Visibility" Value="Collapsed"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="IsReadOnly" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource ThemeColorTextEdit}"/>
                                <Setter Property="FontStyle" Value="Normal"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Style.Resources>
            </Style>

            <!--#region GuideControl-->
            <Style TargetType="Grid" x:Key="GuideControlStyle">
                <Style.Resources>
                    <Style TargetType="Image" x:Key="KeyInputImageStyle">
                        <Setter Property="Height" Value="40"/>
                    </Style>
                    <Style TargetType="TextBlock" x:Key="KeyInputTextStyle">
                        <Setter Property="FontSize" Value="{DynamicResource FontSizeLarge}"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                    </Style>
                    <Style TargetType="Border" x:Key="KeyInputBorderStyle">
                        <Setter Property="Background" Value="{DynamicResource ThemeColorActive}"/>
                        <Setter Property="TextBlock.Foreground" Value="{DynamicResource ThemeColorTextInverted}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource ThemeColorInactive}"/>
                        <Setter Property="BorderThickness" Value="2 2 0 2"/>
                    </Style>
                    <Style TargetType="Border" x:Key="KeyDescriptionBorderStyle">
                        <Setter Property="Background" Value="{DynamicResource ThemeColorMuted}"/>
                        <Setter Property="TextBlock.Foreground" Value="{DynamicResource ThemeColorText}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource ThemeColorInactive}"/>
                        <Setter Property="BorderThickness" Value="0 2 2 2"/>
                        <Setter Property="Padding" Value="10 0"/>
                    </Style>
                </Style.Resources>
            </Style>
            <!--#endregion-->

            <!--#region LineStippleControl-->
            <Style TargetType="Grid" x:Key="LineStippleControlStyle">
                <Style.Resources>
                    <Style TargetType="Grid" x:Key="BitGridStyle">
                        <Setter Property="Height" Value="15"/>
                        <Setter Property="Width" Value="{Binding Path=Height, RelativeSource={RelativeSource Self}}"/>
                        <Setter Property="Background" Value="{DynamicResource ThemeColorInactive}"/>
                        <Style.Triggers>
                            <Trigger Property="Tag">
                                <Trigger.Value>
                                    <System:Boolean>True</System:Boolean>
                                </Trigger.Value>
                                <Setter Property="Background" Value="{DynamicResource DashedPathColor}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Style.Resources>
            </Style>
            <!--#endregion-->

            <!--#region SettingsControl-->
            <Style TargetType="Grid" x:Key="SettingsControlStyle">
                <Style.Resources>
                    <Style TargetType="Border" x:Key="SettingsLabelBorderStyle">
                        <Setter Property="Background" Value="{DynamicResource ThemeColorActive}"/>
                        <Setter Property="TextBlock.Foreground" Value="{DynamicResource ThemeColorTextInverted}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource ThemeColorInactive}"/>
                        <Setter Property="BorderThickness" Value="2 2 2 0"/>
                    </Style>
                    <Style TargetType="Border" x:Key="SettingsContainerBorderStyle">
                        <Setter Property="Background" Value="{DynamicResource ThemeColorMuted}"/>
                        <Setter Property="TextBlock.Foreground" Value="{DynamicResource ThemeColorText}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource ThemeColorInactive}"/>
                        <Setter Property="BorderThickness" Value="0 0 2 2"/>
                    </Style>
                    <Style TargetType="Border" x:Key="BlankBottomLeftBorderStyle" BasedOn="{StaticResource SettingsContainerBorderStyle}">
                        <Setter Property="BorderThickness" Value="2 0 0 2"/>
                    </Style>
                    <Style TargetType="Border" x:Key="SettingBorderStyle" BasedOn="{StaticResource SettingsContainerBorderStyle}">
                        <Setter Property="BorderThickness" Value="2"/>
                        <Setter Property="Padding" Value="10 0"/>
                    </Style>
                    <Style TargetType="Border" x:Key="TemplateBorderStyle">
                        <Setter Property="Grid.Width" Value="100"/>
                        <Setter Property="Grid.Height" Value="50"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource ThemeColorInactive}"/>
                        <Setter Property="BorderThickness" Value="2"/>
                    </Style>
                    <Style TargetType="Slider">
                        <Setter Property="Background" Value="{DynamicResource ThemeColorInactive}"/>
                    </Style>
                    <Style TargetType="ListView">
                        <Setter Property="SelectionMode" Value="Single"/>
                        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
                        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        <Setter Property="Background" Value="{DynamicResource ThemeColorMuted}"/>
                    </Style>
                    <Style TargetType="ListViewItem" x:Key="TemplateListViewItemStyle">
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        <Setter Property="Background" Value="{DynamicResource ThemeColorMain}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource ThemeColorInactive}"/>
                        <Setter Property="BorderThickness" Value="2"/>
                        <Setter Property="Padding" Value="10"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ListViewItem}">
                                    <Border x:Name="Bd" 
                                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                                            Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="{DynamicResource ThemeColorHighlight}"/>
                                        </Trigger>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ThemeColorActive}"/>
                                            <Setter Property="Foreground" Value="{DynamicResource ThemeColorTextInverted}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Style.Resources>
            </Style>
            <!--#endregion-->

            <!--#region NotificationControl-->
            <Style TargetType="custom:NotificationControl" x:Key="NotificationControlStyle">
                <Setter Property="Opacity" Value="0.9"/>
                <Setter Property="Height" Value="100"/>
                <Setter Property="Background" Value="{DynamicResource ThemeColorSuccess}"/>
                <Setter Property="Foreground" Value="{DynamicResource ThemeColorText}"/>
                <Style.Triggers>
                    <Trigger Property="IsError" Value="True">
                        <Setter Property="Background" Value="{DynamicResource ThemeColorError}"/>
                        <Setter Property="Foreground" Value="{DynamicResource ThemeColorText}"/>
                    </Trigger>
                </Style.Triggers>
                <Style.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="TextWrapping" Value="Wrap"/>
                        <Setter Property="Margin" Value="15"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                        <Setter Property="HorizontalAlignment" Value="Center"/>
                    </Style>
                </Style.Resources>
            </Style>
            <!--#endregion-->

            <!--#region MainMenuButton-->
            <Style x:Key="FocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="MainMenuButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="Width" Value="50"/>
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Background" Value="{DynamicResource ThemeColorMuted}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeColorMain}"/>
                <Setter Property="Foreground" Value="{DynamicResource ThemeColorText}"/>
                <Setter Property="BorderThickness" Value="2 1 0 1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" CornerRadius="10" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ThemeColorHighlight}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource ThemeColorHighlight}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource ThemeColorActive}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource ThemeColorVibrant}"/>
                                    <Setter Property="CornerRadius" TargetName="border" Value="10 0 0 10"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--#endregion-->

            <!--#region PreviewButton-->
            <Style x:Key="PreviewButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Background" Value="{DynamicResource ThemeColorMuted}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeColorMain}"/>
                <Setter Property="Foreground" Value="{DynamicResource ThemeColorText}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Width" Value="20"/>
                <Setter Property="Height" Value="20"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                                <Grid>
                                    <Popup x:Name="popup" 
                                       Placement="Bottom" 
                                       PlacementTarget="{Binding ElementName=border}"
                                       IsOpen="False"
                                       AllowsTransparency="True">
                                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Popup>
                                    <Image x:Name="previewOffImage"
                                           Source="{Binding DataContext.PreviewOffBitmap, RelativeSource={RelativeSource AncestorType=UserControl}}"
                                           ToolTip="Preview map"/>
                                    <Image x:Name="previewOnImage"
                                           Source="{Binding DataContext.PreviewOnBitmap, RelativeSource={RelativeSource AncestorType=UserControl}}"
                                           ToolTip="Preview map"
                                           Visibility="Hidden"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ThemeColorHighlight}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource ThemeColorHighlight}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource ThemeColorMuted}"/>
                                    <Setter Property="IsOpen" TargetName="popup" Value="True"/>
                                    <Setter Property="Visibility" TargetName="previewOnImage" Value="Visible"/>
                                    <Setter Property="Visibility" TargetName="previewOffImage" Value="Hidden"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--#endregion-->
        </ResourceDictionary>
    </Application.Resources>
</Application>
